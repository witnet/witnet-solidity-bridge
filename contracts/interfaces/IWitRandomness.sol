// SPDX-License-Identifier: MIT

pragma solidity >=0.8.0 <0.9.0;

import "../WitOracle.sol";

/// @title The Witnet Randomness generator interface.
/// @author Witnet Foundation.
interface IWitRandomness {

    type EvmBlockNumber is uint96;
   
    /// @notice Returns amount of wei required to be paid as a fee when requesting randomization with a 
    /// transaction gas price as the one given.
    function estimateRandomizeFee(uint256 evmGasPrice) external view returns (uint256);

    /// @notice Retrieves the result of keccak256-hashing the given block number with the randomness value 
    /// generated by the Wit/Oracle blockchain in response to the first non-failing randomize request solved 
    /// after such block number.
    ///
    /// @dev Reverts if:
    ///    i.   no `randomize()` was queried on neither the given block, nor afterwards.
    ///    ii.  the first non-failing `randomize()` request found on or after the given block is not solved yet.
    ///    iii. all `randomize()` requests that took place on or after the given block were solved with errors.
    ///
    /// @param blockNumber Block number from which the search will start.
    function fetchRandomnessAfter(EvmBlockNumber blockNumber) external view returns (bytes32);

    /// @notice Retrieves the actual random value, unique hash and timestamp of the witnessing commit/reveal act 
    /// that took place in the Wit/Oracle blockchain in response to the first non-failing randomize query
    /// solved after the given block number.
    ///
    /// @dev Reverts if:
    ///    i.   no `randomize()` was queried on neither the given block, nor afterwards.
    ///    ii.  the first non-failing `randomize()` request found on or after the given block is not solved yet.
    ///    iii. all `randomize()` requests that took place on or after the given block were solved with errors.
    ///
    /// @param blockNumber Block number from which the search will start.
    ///
    /// @return resultDrTxHash Hash of the witnessing commit/reveal act that took place on the Wit/Oracle blockchain.
    /// @return resultTimestamp Timestamp at which the randomness value was generated by the Wit/Oracle blockchain.
    function fetchRandomnessAfterProof(EvmBlockNumber blockNumber) external view returns (
            Witnet.TransactionHash resultDrTxHash,
            Witnet.Timestamp resultTimestamp
        ); 

    /// @notice Returns last block number on which a randomize was queried.
    function getLastRandomizeBlock() external view returns (EvmBlockNumber);

    /// @notice Retrieves metadata related to the randomize request that got queried to the`WitOracle` contract 
    /// on the specified block number, if any.
    ///
    /// @dev Returns zero values if no randomize request was actually queried on the specified block number.
    ///
    /// @param blockNumber Block number from which the search will start.
    ///
    /// @return queryId Identifier of the underlying Wit/Oracle query created on the specified block number. 
    /// @return prevRandomizeBlock Block number in which a randomize request got queried just before this one. 0 if none.
    /// @return nextRandomizeBlock Block number in which a randomize request got queried just after this one, 0 if none.
    function getRandomizeData(EvmBlockNumber blockNumber) external view returns (
            Witnet.QueryId queryId,
            EvmBlockNumber prevRandomizeBlock,
            EvmBlockNumber nextRandomizeBlock
        );

    /// @notice Returns security and liveness parameters required to the Wit/Oracle blockchain 
    /// when solving randomness requests, if no others are specified.
    /// @param witCommitteeSize Number of Wit/Oracle nodes contributing to unbiased randomness.
    /// @param witInclusionFees Minimum amount of fees in $nanoWIT to be paid on the Wit/Oracle blockchain
    function getRandomizeDefaultParams() 
        external view returns (
            uint16 witCommitteeSize,
            uint64 witInclusionFees
        );
    
    /// @notice Returns the number of the next block in which a randomize request was posted after the given one. 
    /// @param blockNumber Block number from which the search will start.
    /// @return Number of the first block found after the given one, or `0` otherwise.
    function getRandomizeNextBlock(EvmBlockNumber blockNumber) external view returns (EvmBlockNumber); 

    /// @notice Returns the number of the previous block in which a randomize request was posted before the given one.
    /// @param blockNumber Block number from which the search will start.
    /// @return First block found before the given one, or `0` otherwise.
    function getRandomizePrevBlock(EvmBlockNumber blockNumber) external view returns (EvmBlockNumber);

    /// @notice Returns the bytecode of the Radon Request used for solving
    /// randomness requests on the Wit/Oracle blockchain.
    function getRandomizeRadonBytecode() external view returns (bytes memory);

    /// @notice Returns the unique identifier of the Radon Request used for solving 
    /// request randomness requests on the Wit/Oracle blockchain.
    function getRandomizeRadonHash() external view returns (Witnet.RadonHash);

    /// @notice Returns the Radon Request used for solving 
    /// request randomness requests on the Wit/Oracle blockchain.
    function getRandomizeRadonRequest() external view returns (Witnet.RadonRequest memory);

    /// @notice Returns status of the first non-errored randomize request queried on or after the given block number.
    ///  - 0 -> Void: no randomize request was actually queried on or after the given block number.
    ///  - 1 -> Posted: a randomize request was found but it's not yet solved by the Wit/Oracle.
    ///  - 2 -> Finalizing: a randomize result was relayed already but cannot yet be considered to be final.
    ///  - 3 -> Ready: a successfull randomize value was reported and is ready to be read.
    ///  - 4 -> Error: all attempted randomize requests at or after the given block were solved with errors.
    function getRandomizeStatus(EvmBlockNumber blockNumber) external view returns (RandomizeStatus);    
        enum RandomizeStatus {
            Void,
            Posted,
            Finalizing,
            Ready,
            Error
        }
    function getRandomizeStatusDescription(EvmBlockNumber blockNumber) external view returns (string memory);

    /// @notice Returns `true` only if a successfull resolution from the Wit/Oracle blockchain is found for the 
    /// first non-failing randomize request posted on or after the given block number.
    function isRandomized(EvmBlockNumber blockNumber) external view returns (bool);

    /// @notice Generates a pseudo-random number uniformly distributed within the range [0 .. _range), by using 
    /// the given `nonce` and the randomness returned by `fetchRandomnessAfter(blockNumber)`. 
    ///
    /// @dev Fails under same conditions as `fetchRandomnessAfter(uint256)` does.
    ///
    /// @param range Range within which the uniformly-distributed random number will be generated.
    /// @param nonce Nonce value enabling multiple random numbers from the same randomness value.
    /// @param blockNumber Block number from which the search for the first randomize request solved aftewards will start.
    function random(uint32 range, uint256 nonce, EvmBlockNumber blockNumber) external view returns (uint32);

    /// @notice Requests the Wit/Oracle sidechain to generate a new unbiased and EVM-agnostic source of randomness. 
    ///
    /// @dev Only one randomize request per block will get ultimately relayed to the Wit/Oracle sidechain.
    /// Unused funds will be transferred back to the `msg.sender`. 
    ///
    /// @return EVM funds actually paid as randomize fee.
    function randomize() external payable returns (uint256);

    /// @notice Requests the Wit/Oracle sidechain to generate unbiased and EVM-agnostic source of randomness,
    /// complying with the given SLA parameters.
    ///
    /// @dev Only one randomize request per block will get ultimately relayed to the Wit/Oracle sidechain.
    /// Unused funds will be transferred back to the `msg.sender`. Reverts if given parameters don't comply 
    /// with `IWitRandomnessAdmin.witOracleRequiredParams()` limits.
    ///
    /// @param witCommitteeSize The randomness request will have to be solved by this exact number of witnesses.
    /// @param witInclusionFees Minimum amount of nanoWits to be paid as fees on the Wit/Oracle blockchain.
    ///
    /// @return Funds actually paid as randomize fee.
    function randomize(uint16 witCommitteeSize, uint64 witInclusionFees) external payable returns (uint256);
}
