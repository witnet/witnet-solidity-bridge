// SPDX-License-Identifier: MIT

pragma solidity >=0.8.0 <0.9.0;

import "../WitOracle.sol";

/// @title The Witnet Randomness generator interface.
/// @author Witnet Foundation.
interface IWitRandomness {

    type EvmBlockNumber is uint96;

    struct WitParams {
        // Max number of eligibile witnesses in the Wit/Oracle blockchain for solving some randomness request.
        uint16 witCommitteeSize;
        // fees in nanowits to be paid to the validator including some randomness request in the Wit/Oracle blockchain.
        uint64 witInclusionFees;
    }
   
    /// @notice Returns amount of wei required to be paid as a fee when requesting randomization with a 
    /// transaction gas price as the one given.
    function estimateRandomizeFee(uint256 evmGasPrice) external view returns (uint256);

    /// @notice Retrieves the result of keccak256-hashing the given block number with the randomness value 
    /// @notice generated by the Wit/Oracle blockchain in response to the first non-failing randomize request solved 
    /// @notice after such block number.
    /// @dev Reverts if:
    /// @dev   i.   no `randomize()` was requested on neither the given block, nor afterwards.
    /// @dev   ii.  the first non-failing `randomize()` request found on or after the given block is not solved yet.
    /// @dev   iii. all `randomize()` requests that took place on or after the given block were solved with errors.
    /// @param blockNumber Block number from which the search will start.
    function fetchRandomnessAfter(EvmBlockNumber blockNumber) external view returns (bytes32);

    /// @notice Retrieves the actual random value, unique hash and timestamp of the witnessing commit/reveal act that took
    /// @notice place in the Wit/Oracle blockchain in response to the first non-failing randomize request
    /// @notice solved after the given block number.
    /// @dev Reverts if:
    /// @dev   i.   no `randomize()` was requested on neither the given block, nor afterwards.
    /// @dev   ii.  the first non-failing `randomize()` request found on or after the given block is not solved yet.
    /// @dev   iii. all `randomize()` requests that took place on or after the given block were solved with errors.
    /// @param blockNumber Block number from which the search will start.
    /// @return resultDrTxHash Hash of the witnessing commit/reveal act that took place on the Witnet blockchain.
    /// @return resultTimestamp Timestamp at which the randomness value was generated by the Witnet blockchain.
    function fetchRandomnessAfterProof(EvmBlockNumber blockNumber) external view returns (
            Witnet.TransactionHash resultDrTxHash,
            Witnet.Timestamp resultTimestamp
        ); 

    /// @notice Returns last block number on which a randomize was requested.
    function getLastRandomizeBlock() external view returns (EvmBlockNumber);

    /// @notice Retrieves metadata related to the randomize request that got posted to the 
    /// @notice Wit/Oracle contract on the given block number.
    /// @dev Returns zero values if no randomize request was actually posted on the given block.
    /// @return queryId Identifier of the underlying Witnet query created on the given block number. 
    /// @return prevRandomizeBlock Block number in which a randomize request got posted just before this one. 0 if none.
    /// @return nextRandomizeBlock Block number in which a randomize request got posted just after this one, 0 if none.
    function getRandomizeData(EvmBlockNumber blockNumber) external view returns (
            Witnet.QueryId queryId,
            EvmBlockNumber prevRandomizeBlock,
            EvmBlockNumber nextRandomizeBlock
        );

    /// @notice Returns default SLA parameters required for the Wit/Oracle blockchain to fulfill 
    /// @notice when solving randomness requests, if no others are specified:
    /// @notice - number of witnessing nodes contributing to randomness generation
    /// @notice - reward in $nanoWIT received per witnessing node in the Witnet blockchain
    function getRandomizeDefaultParams() external view returns (WitParams memory);
    
    /// @notice Returns the number of the next block in which a randomize request was posted after the given one. 
    /// @param blockNumber Block number from which the search will start.
    /// @return Number of the first block found after the given one, or `0` otherwise.
    function getRandomizeNextBlock(EvmBlockNumber blockNumber) external view returns (EvmBlockNumber); 

    /// @notice Returns the number of the previous block in which a randomize request was posted before the given one.
    /// @param blockNumber Block number from which the search will start.
    /// @return First block found before the given one, or `0` otherwise.
    function getRandomizePrevBlock(EvmBlockNumber blockNumber) external view returns (EvmBlockNumber);

    /// @notice Returns the bytecode of the Radon Request used for solving
    /// randomness requests on the Wit/Oracle blockchain.
    function getRandomizeRadonBytecode() external view returns (bytes memory);

    /// @notice Returns the unique identifier of the Radon Request used for solving 
    /// request randomness requests on the Wit/Oracle blockchain.
    function getRandomizeRadonHash() external view returns (Witnet.RadonHash);

    /// @notice Returns the Radon Request used for solving 
    /// request randomness requests on the Wit/Oracle blockchain.
    function getRandomizeRadonRequest() external view returns (Witnet.RadonRequest memory);

    /// @notice Returns status of the first non-errored randomize request posted on or after the given block number.
    /// @dev - 0 -> Unknown: no randomize request was actually posted on or after the given block number.
    /// @dev - 1 -> Posted: a randomize request was found but it's not yet solved by the Witnet blockchain.
    /// @dev - 2 -> Reported: a randomize result was reported but cannot yet be considered to be final
    /// @dev - 3 -> Ready: a successfull randomize value was reported and ready to be read.
    /// @dev - 4 -> Error: all randomize requests after the given block were solved with errors.
    function getRandomizeStatus(EvmBlockNumber blockNumber) external view returns (RandomizeStatus);    
        enum RandomizeStatus {
            Void,
            Posted,
            Finalizing,
            Ready,
            Error
        }
    function getRandomizeStatusDescription(EvmBlockNumber blockNumber) external view returns (string memory);

    /// @notice Returns `true` only if a successfull resolution from the Witnet blockchain is found for the first 
    /// @notice non-failing randomize request posted on or after the given block number.
    function isRandomized(EvmBlockNumber blockNumber) external view returns (bool);

    /// @notice Generates a pseudo-random number uniformly distributed within the range [0 .. _range), by using 
    /// @notice the given `nonce` and the randomness returned by `fetchRandomnessAfter(blockNumber)`. 
    /// @dev Fails under same conditions as `fetchRandomnessAfter(uint256)` does.
    /// @param range Range within which the uniformly-distributed random number will be generated.
    /// @param nonce Nonce value enabling multiple random numbers from the same randomness value.
    /// @param blockNumber Block number from which the search for the first randomize request solved aftewards will start.
    function random(uint32 range, uint256 nonce, EvmBlockNumber blockNumber) external view returns (uint32);

    /// @notice Requests the Witnet oracle to generate an EVM-agnostic and trustless source of randomness. 
    /// @dev Only one randomness request per block will be actually posted to the Wit/Oracle. 
    /// @dev Unused funds will be transferred back to the `msg.sender`. 
    /// @return Funds actually paid as randomize fee. 
    function randomize() external payable returns (uint256);

    /// @notice Requests the Witnet oracle to generate an EVM-agnostic and trustless source of randomness,
    /// @notice while fulfilling the given SLA data security parameters.
    /// @dev Only one randomness request per block will be actually posted to the Wit/Oracle. 
    /// @dev Unused funds will be transferred back to the `msg.sender`. 
    /// @dev Passed SLA security parameters must be equal or greater than `witOracleDefaultQuerySLA()`.
    /// @return Funds actually paid as randomize fee. 
    function randomizeWithParams(WitParams calldata) external payable returns (uint256);
}
