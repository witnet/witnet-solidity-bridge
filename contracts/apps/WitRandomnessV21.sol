// SPDX-License-Identifier: MIT

pragma solidity >=0.8.0 <0.9.0;

import "../WitRandomness.sol";
import "../interfaces/IWitRandomnessAdmin.sol";
import "../mockups/UsingWitOracle.sol";
import "../patterns/Ownable2Step.sol";

/// @title WitRandomnessV21: Unmalleable and provably-fair randomness generation based on the Wit/Oracle v2.*.
/// @author Guillermo DÃ­az <guillermo@witnet.io>
contract WitRandomnessV21
    is
        Ownable2Step,
        UsingWitOracle,
        WitRandomness,
        IWitRandomnessAdmin
{
    using Witnet for bytes;
    using Witnet for uint64;
    using Witnet for EvmBlockNumber;
    using Witnet for Witnet.DataResult;
    using Witnet for Witnet.QueryId;
    using Witnet for Witnet.QuerySLA;
    using Witnet for Witnet.ResultStatus;

    struct Randomize {
        Witnet.QueryId queryId;
        EvmBlockNumber prevEvmBlock;
        EvmBlockNumber nextEvmBlock;
    }

    struct Storage {
        EvmBlockNumber lastRandomizeBlock;
        mapping (EvmBlockNumber => Randomize) randomize_;
    }

    /// @notice Unique identifier of the RNG data request used on the Wit/Oracle blockchain for solving randomness.
    /// @dev Can be used to track all randomness requests solved so far on the Wit/Oracle blockchain.
    Witnet.RadonHash internal immutable __witOracleQueryRadonHash;

    constructor(
            WitOracle _witOracle,
            address _operator
        )
        Ownable(_operator)
        UsingWitOracle(_witOracle)
    {
        // Build Witnet-compliant randomness request:
        WitOracleRadonRegistry _registry = witOracle().registry();
        __witOracleQueryRadonHash = _registry.verifyRadonRequest(
            Witnet.intoMemArray([
                _registry.verifyRadonRetrieval(
                    Witnet.RadonRetrievalMethods.RNG,
                    "", // no request url
                    "", // no request body
                    new string[2][](0), // no request headers
                    hex"80" // no request Radon script
                )
            ]),
            Witnet.RadonReducer({
                opcode: Witnet.RadonReduceOpcodes.Mode,
                filters: new Witnet.RadonFilter[](0)
            }),
            Witnet.RadonReducer({
                opcode: Witnet.RadonReduceOpcodes.ConcatenateAndHash,
                filters: new Witnet.RadonFilter[](0)
            })
        );
        __witOracleDefaultQueryParams.witResultMaxSize = 34;
    }

    receive() virtual external payable {
        _revert("no transfers accepted");
    }

    fallback() virtual external payable { 
        _revert(string(abi.encodePacked(
            "not implemented: 0x",
            Witnet.toHexString(uint8(bytes1(msg.sig))),
            Witnet.toHexString(uint8(bytes1(msg.sig << 8))),
            Witnet.toHexString(uint8(bytes1(msg.sig << 16))),
            Witnet.toHexString(uint8(bytes1(msg.sig << 24)))
        )));
    }

    function class() virtual override public pure returns (string memory) {
        return type(WitRandomnessV21).name;
    }

    function witOracle() override (IWitOracleAppliance, UsingWitOracle)
        public view returns (WitOracle)
    {
        return UsingWitOracle.witOracle();
    }

    
    /// ===============================================================================================================
    /// --- 'IWitRandomness' implementation ---------------------------------------------------------------------------

    /// Returns amount of wei required to be paid as a fee when requesting randomization with a 
    /// transaction gas price as the one given.
    function estimateRandomizeFee(uint256 _evmGasPrice)
        public view
        virtual override
        returns (uint256)
    {
        return (
            __witOracle.estimateBaseFee(_evmGasPrice) 
                * (100 + __witOracleBaseFeeOverheadPercentage)
        ) / 100;
    }

    /// @notice Retrieves the result of keccak256-hashing the given block number with the randomness value 
    /// @notice generated by the Wit/Oracle blockchain in response to the first non-errored randomize request solved 
    /// @notice after such block number.
    /// @dev Reverts if:
    /// @dev   i.   no `randomize()` was requested on neither the given block, nor afterwards.
    /// @dev   ii.  the first non-errored `randomize()` request found on or after the given block is not solved yet.
    /// @dev   iii. all `randomize()` requests that took place on or after the given block were solved with errors.
    /// @param _evmBlockNumber Block number from which the search will start
    function fetchRandomnessAfter(EvmBlockNumber _evmBlockNumber)
        public view
        virtual override
        returns (bytes32)
    {
        return keccak256(
            abi.encode(
                _evmBlockNumber,
                _fetchRandomnessAfter(_evmBlockNumber)
            )
        );
    }
    
    /// @notice Retrieves the actual unique hash and timestamp of the witnessing commit/reveal act that took
    /// @notice place in the Wit/Oracle sidechain in response to the first non-errored randomize request
    /// @notice solved after the given block number.
    /// @dev Reverts if:
    /// @dev   i.   no `randomize()` was requested on neither the given block, nor afterwards.
    /// @dev   ii.  the first non-errored `randomize()` request found on or after the given block is not solved yet.
    /// @dev   iii. all `randomize()` requests that took place on or after the given block were solved with errors.
    /// @param _evmBlockNumber Block number from which the search will start.
    /// @return _resultDrTxHash Hash of the witnessing commit/reveal act that took place on the Witnet blockchain.
    /// @return _resultTimestamp Timestamp at which the randomness value was generated by the Witnet blockchain.
    function fetchRandomnessAfterProof(EvmBlockNumber _evmBlockNumber) 
        virtual override
        public view 
        returns (
            Witnet.TransactionHash _resultDrTxHash,
            Witnet.Timestamp  _resultTimestamp
        )
    {
        Witnet.QueryResponse memory _response = __witOracle.getQueryResponse(
            _fetchRandomizeValidResultQueryId(_evmBlockNumber)
        );
        return (
            _response.resultDrTxHash,
            _response.resultTimestamp
        );
    }

    /// @notice Returns last block number on which a randomize was requested.
    function getLastRandomizeBlock()
        virtual override
        external view
        returns (EvmBlockNumber)
    {
        return __storage().lastRandomizeBlock;
    }

    /// @notice Retrieves metadata related to the randomize request that got posted to the 
    /// @notice Wit/Oracle contract on the given block number.
    /// @dev Returns zero values if no randomize request was actually posted on the given block.
    /// @return _queryId Identifier of the underlying Witnet query created on the given block number. 
    /// @return _prevRandomizeBlock Block number in which a randomize request got posted just before this one. 0 if none.
    /// @return _nextRandomizeBlock Block number in which a randomize request got posted just after this one, 0 if none.
    function getRandomizeData(EvmBlockNumber _evmBlockNumber)
        external view
        virtual override
        returns (
            Witnet.QueryId _queryId,
            EvmBlockNumber _prevRandomizeBlock,
            EvmBlockNumber _nextRandomizeBlock
        )
    {
        Randomize storage __randomize = __storage().randomize_[_evmBlockNumber];
        _queryId = __randomize.queryId;
        _prevRandomizeBlock = __randomize.prevEvmBlock;
        _nextRandomizeBlock = __randomize.nextEvmBlock;
    }

    /// @notice Returns default SLA parameters required for the Wit/Oracle blockchain to fulfill 
    /// @notice when solving randomness requests, if no others are specified:
    /// @notice - number of witnessing nodes contributing to randomness generation
    /// @notice - reward in $nanoWIT received per witnessing node in the Witnet blockchain
    function getRandomizeDefaultParams() 
        virtual override
        public view
        returns (WitParams memory)
    {
        return WitParams({
            witCommitteeSize: __witOracleDefaultQueryParams.witCommitteeSize,
            witInclusionFees: __witOracleDefaultQueryParams.witInclusionFees
        });
    }

    /// @notice Returns the number of the next block in which a randomize request was posted after the given one. 
    /// @param _evmBlockNumber Block number from which the search will start.
    /// @return Number of the first block found after the given one, or `0` otherwise.
    function getRandomizeNextBlock(EvmBlockNumber _evmBlockNumber)
        public view
        virtual override
        returns (EvmBlockNumber)
    {
        return (__storage().randomize_[_evmBlockNumber].queryId.isZero()
            ? _searchNextBlock(_evmBlockNumber, __storage().lastRandomizeBlock)
            : __storage().randomize_[_evmBlockNumber].nextEvmBlock
        );
    }

    /// @notice Returns the number of the previous block in which a randomize request was posted before the given one.
    /// @param _evmBlockNumber Block number from which the search will start. Cannot be zero.
    /// @return First block found before the given one, or `0` otherwise.
    function getRandomizePrevBlock(EvmBlockNumber _evmBlockNumber)
        public view
        virtual override
        returns (EvmBlockNumber)
    {
        EvmBlockNumber _latest = __storage().lastRandomizeBlock;
        return (EvmBlockNumber.unwrap(_evmBlockNumber) > EvmBlockNumber.unwrap(_latest)
            ? _latest
            // start search from the latest block
            : _searchPrevBlock(_evmBlockNumber, __storage().randomize_[_latest].prevEvmBlock)
        );
    }

    /// @notice Returns the bytecode of the Radon Request used for solving
    /// randomness requests on the Wit/Oracle blockchain.
    function getRandomizeRadonBytecode() virtual override external view returns (bytes memory) {
        return witOracle().registry().bytecodeOf(getRandomizeRadonHash());
    }

    /// @notice Returns the unique identifier of the Radon Request used for solving 
    /// request randomness requests on the Wit/Oracle blockchain.
    function getRandomizeRadonHash() virtual override public view returns (Witnet.RadonHash) {
        return __witOracleQueryRadonHash;
    }

    /// @notice Returns the Radon Request used for solving 
    /// request randomness requests on the Wit/Oracle blockchain.
    function getRandomizeRadonRequest() virtual override external view returns (Witnet.RadonRequest memory) {
        return witOracle().registry().lookupRadonRequest(getRandomizeRadonHash());
    }

    /// @notice Returns status of the first non-errored randomize request posted on or after the given block number.
    /// @dev - 0 -> Unknown: no randomize request was actually posted on or after the given block number.
    /// @dev - 1 -> Posted: a randomize request was found but it's not yet solved by the Witnet blockchain.
    /// @dev - 2 -> Reported: a randomize result was reported but cannot yet be considered to be final
    /// @dev - 3 -> Ready: a successfull randomize value was reported and it'sready to be read.
    /// @dev - 4 -> Error: all randomize requests after the given block were solved with errors.
    function getRandomizeStatus(EvmBlockNumber _evmBlockNumber)
        virtual override
        public view 
        returns (RandomizeStatus)
    {
        if (__storage().randomize_[_evmBlockNumber].queryId.isZero()) {
            _evmBlockNumber = getRandomizeNextBlock(_evmBlockNumber);
        }
        Witnet.QueryId _queryId = __storage().randomize_[_evmBlockNumber].queryId;
        if (_queryId.isZero()) {
            return RandomizeStatus.Void;
        }
        Witnet.ResultStatus _status = __witOracle.getQueryResultStatus(_queryId);
        if (_status == Witnet.ResultStatus.BoardAwaitingResult) {
            return RandomizeStatus.Posted;
        
        } else if (_status == Witnet.ResultStatus.BoardFinalizingResult) {
            return RandomizeStatus.Finalizing;

        } else if (_status != Witnet.ResultStatus.NoErrors) {
            return RandomizeStatus.Ready;
        
        } else {
            EvmBlockNumber _nextRandomizeBlock = __storage().randomize_[_evmBlockNumber].nextEvmBlock;
            if (EvmBlockNumber.unwrap(_nextRandomizeBlock) != 0) {
                return getRandomizeStatus(_nextRandomizeBlock);
            } else {
                return RandomizeStatus.Error;
            }
        }
    }

    function getRandomizeStatusDescription(EvmBlockNumber _evmBlockNumber) 
        virtual override 
        public view
        returns (string memory)
    {
        if (__storage().randomize_[_evmBlockNumber].queryId.isZero()) {
            _evmBlockNumber = getRandomizeNextBlock(_evmBlockNumber);
        }
        Witnet.QueryId _queryId = __storage().randomize_[_evmBlockNumber].queryId;
        if (_queryId.isZero()) {
            return string(abi.encodePacked(
                "No randomize after block #",
                Witnet.toString(uint256(EvmBlockNumber.unwrap(_evmBlockNumber)))
            ));
        }
        Witnet.ResultStatus _status = __witOracle.getQueryResultStatus(_queryId);
        if (_status == Witnet.ResultStatus.BoardAwaitingResult) {
            return string(abi.encodePacked(
                "Randomize posted as for block #",
                Witnet.toString(EvmBlockNumber.unwrap(_evmBlockNumber))
            ));
        
        } else if (_status == Witnet.ResultStatus.BoardFinalizingResult) {
            return string(abi.encodePacked(
                "Finalizing randomize as for block #",
                Witnet.toString(EvmBlockNumber.unwrap(_evmBlockNumber))
            ));

        } else if (_status != Witnet.ResultStatus.NoErrors) {
            return string(abi.encodePacked(
                "Randomize result ready as for block #",
                Witnet.toString(EvmBlockNumber.unwrap(_evmBlockNumber))
            ));
        
        } else {
            EvmBlockNumber _nextRandomizeBlock = __storage().randomize_[_evmBlockNumber].nextEvmBlock;
            if (EvmBlockNumber.unwrap(_nextRandomizeBlock) != 0) {
                return getRandomizeStatusDescription(_nextRandomizeBlock);
            
            } else {
                return string(abi.encodePacked(
                    "Randomize failed as for block #",
                    Witnet.toString(EvmBlockNumber.unwrap(_evmBlockNumber)),
                    ": ",
                    __witOracle.getQueryResultStatusDescription(_queryId)
                ));
            }
        }
    }

    /// @notice Returns `true` only if a successfull resolution from the Witnet blockchain is found for the first 
    /// @notice non-errored randomize request posted on or after the given block number.
    function isRandomized(EvmBlockNumber _evmBlockNumber)
        public view
        virtual override
        returns (bool)
    {
        return (
            getRandomizeStatus(_evmBlockNumber) == RandomizeStatus.Ready
        );
    }

    /// @notice Generates a pseudo-random number uniformly distributed within the range [0 .. _range), by using 
    /// @notice the given `nonce` and the randomness returned by `getRandomnessAfter(blockNumber)`. 
    /// @dev Fails under same conditions as `getRandomnessAfter(uint256)` does.
    /// @param _range Range within which the uniformly-distributed random number will be generated.
    /// @param _nonce Nonce value enabling multiple random numbers from the same randomness value.
    /// @param _evmBlockNumber Block number from which the search for the first randomize request solved aftewards will start.
    function random(uint32 _range, uint256 _nonce, EvmBlockNumber _evmBlockNumber)
        external view 
        virtual override
        returns (uint32)
    {
        return Witnet.randomUniformUint32(
            _range,
            _nonce,
            keccak256(
                abi.encode(
                    msg.sender,
                    fetchRandomnessAfter(_evmBlockNumber)
                )
            )
        );
    }

    /// @notice Requests the Witnet oracle to generate an EVM-agnostic and trustless source of randomness. 
    /// @dev Only one randomness request per block will be actually posted to the Wit/Oracle. 
    /// @return Funds actually paid as randomize fee.
    function randomize()
        external payable
        virtual override
        returns (uint256)
    {
        return __postRandomizeQuery(__witOracleDefaultQueryParams);
    }

    /// @notice Requests the Witnet oracle to generate an EVM-agnostic and trustless source of randomness. 
    /// @dev Only one randomness request per block will be actually posted to the Wit/Oracle. 
    /// @dev Reverts if given SLA security parameters are below witOracleDefaultQuerySLA().
    /// @return Funds actually paid as randomize fee.
    function randomizeWithParams(WitParams calldata _randomizeSLA)
        external payable
        virtual override
        returns (uint256)
    {
        return __postRandomizeQuery(_intoQuerySLA(_randomizeSLA));
    }


    /// ===============================================================================================================
    /// --- 'IWitRandomnessAdmin' implementation -------------------------------------------------------------------

    function acceptOwnership()
        virtual override (IWitRandomnessAdmin, Ownable2Step)
        public
    {
        Ownable2Step.acceptOwnership();
    }

    function baseFeeOverheadPercentage()
        virtual override
        external view 
        returns (uint16)
    {
        return __witOracleBaseFeeOverheadPercentage;
    }

    function owner()
        virtual override (IWitRandomnessAdmin, Ownable)
        public view 
        returns (address)
    {
        return Ownable.owner();
    }

    function pendingOwner() 
        virtual override (IWitRandomnessAdmin, Ownable2Step)
        public view
        returns (address)
    {
        return Ownable2Step.pendingOwner();
    }
    
    function transferOwnership(address _newOwner)
        virtual override (IWitRandomnessAdmin, Ownable2Step)
        public 
        onlyOwner
    {
        Ownable.transferOwnership(_newOwner);
    }

    function settleBaseFeeOverheadPercentage(uint16 _baseFeeOverheadPercentage)
        virtual override
        external
        onlyOwner
    {
        __witOracleBaseFeeOverheadPercentage = _baseFeeOverheadPercentage;
    }

    function settleDefaultQuerySLA(Witnet.QuerySLA calldata _querySLA)
        virtual override
        external
        onlyOwner
    {
        _require(
            _querySLA.isValid(),
            "invalid SLA"
        );
        __witOracleDefaultQueryParams = _querySLA;
    }


    // ================================================================================================================
    // --- Internal methods -------------------------------------------------------------------------------------------

    function _fetchRandomnessAfter(EvmBlockNumber _evmBlockNumber)
        virtual internal view 
        returns (bytes32)
    {
        return __witOracle.getQueryResult(
            _fetchRandomizeValidResultQueryId(_evmBlockNumber)
        ).fetchBytes32();
    }

    function _fetchRandomizeValidResultQueryId(EvmBlockNumber _evmBlockNumber)
        virtual internal view 
        returns (Witnet.QueryId _queryId)
    {
        if (__storage().randomize_[_evmBlockNumber].queryId.isZero()) {
            _evmBlockNumber = getRandomizeNextBlock(_evmBlockNumber);
        }
        Randomize storage __data = __storage().randomize_[_evmBlockNumber];
        _queryId = __data.queryId;
        if (_queryId.isZero()) {
            _revert("not randomized");
        } 
        Witnet.ResultStatus _status  = __witOracle.getQueryResultStatus(_queryId);
        if (_status.keepWaiting()) {
            _revert(string(abi.encodePacked(
                "pending randomize on block #",
                Witnet.toString(EvmBlockNumber.unwrap(_evmBlockNumber))
            )));
        
        } else if (_status.hasErrors()) {
            EvmBlockNumber _nextRandomizeBlock = __data.nextEvmBlock;
            _require(
                EvmBlockNumber.unwrap(_nextRandomizeBlock) != 0, 
                string(abi.encodePacked(
                    "faulty randomize on block #",
                    Witnet.toString(EvmBlockNumber.unwrap(_evmBlockNumber))
                ))
            );
            return _fetchRandomizeValidResultQueryId(_nextRandomizeBlock);
        }
    }

    function _intoQuerySLA(WitParams calldata _randomizeSLA) internal view returns (Witnet.QuerySLA memory) {
        if (
            _randomizeSLA.witCommitteeSize >= __witOracleDefaultQueryParams.witCommitteeSize
                && _randomizeSLA.witInclusionFees >= __witOracleDefaultQueryParams.witInclusionFees
        ) {
            return Witnet.QuerySLA({
                witCommitteeSize: _randomizeSLA.witCommitteeSize,
                witInclusionFees: _randomizeSLA.witInclusionFees,
                witResultMaxSize: __witOracleDefaultQueryParams.witResultMaxSize
            });
        
        } else {
            _revert("unsecure randomize");
        }
    }

    function __postRandomizeQuery(Witnet.QuerySLA memory _querySLA)
        internal
        returns (uint256 _evmUsedFunds)
    {
        Witnet.QueryId _queryId;
        EvmBlockNumber _evmBlockNumber = EvmBlockNumber.wrap(uint64(block.number));
        Randomize storage __randomize = __storage().randomize_[_evmBlockNumber];
        if (EvmBlockNumber.unwrap(__storage().lastRandomizeBlock) < EvmBlockNumber.unwrap(_evmBlockNumber)) {
            _evmUsedFunds = msg.value;
            
            // Post the Witnet Randomness request:
            _queryId = __witOracle.postQuery{
                value: msg.value
            }(
                __witOracleQueryRadonHash,
                _querySLA
            );

            // Save Randomize metadata in storage:
            __randomize.queryId = _queryId;
            EvmBlockNumber _prevBlock = __storage().lastRandomizeBlock;
            __randomize.prevEvmBlock = _prevBlock;
            __storage().randomize_[_prevBlock].nextEvmBlock = _evmBlockNumber;
            __storage().lastRandomizeBlock = _evmBlockNumber;
        
        } else {
            _queryId = __storage().randomize_[_evmBlockNumber].queryId;
        }

        // Transfer back unused funds:
        if (_evmUsedFunds < msg.value) {
            payable(msg.sender).transfer(msg.value - _evmUsedFunds);
        }

        // Emit event upon every randomize call, even if multiple within same block:
        // solhint-disable-next-line avoid-tx-origin
        emit Randomizing(tx.origin, _msgSender(), _queryId);
    }

    /// @dev Recursively searches for the number of the first block after the given one in which a Witnet 
    /// @dev randomness request was posted. Returns 0 if none found.
    function _searchNextBlock(EvmBlockNumber _target, EvmBlockNumber _latest) internal view returns (EvmBlockNumber) {
        return (EvmBlockNumber.unwrap(_target) >= EvmBlockNumber.unwrap(_latest) 
            ? __storage().randomize_[_latest].nextEvmBlock
            : _searchNextBlock(_target, __storage().randomize_[_latest].prevEvmBlock)
        );
    }

    /// @dev Recursively searches for the number of the first block before the given one in which a Witnet 
    /// @dev randomness request was posted. Returns 0 if none found.
    function _searchPrevBlock(EvmBlockNumber _target, EvmBlockNumber _latest) internal view returns (EvmBlockNumber) {
        return (EvmBlockNumber.unwrap(_target) > EvmBlockNumber.unwrap(_latest)
            ? _latest
            : _searchPrevBlock(_target, __storage().randomize_[_latest].prevEvmBlock)
        );
    }

    bytes32 private constant _STORAGE_SLOT = 
        // keccak256("io.witnet.apps.randomness.v21")
        0xad347e0aa7977751e064b632bb66fc0bf1ba5efb89904260ebcdf6f008718e67;

    function __storage() internal pure returns (Storage storage _ptr) {
        assembly {
            _ptr.slot := _STORAGE_SLOT
        }
    }
}
